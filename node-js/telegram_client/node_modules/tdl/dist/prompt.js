"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPhoneNumber = exports.getPassword = exports.getName = exports.getEmailCode = exports.getEmailAddress = exports.getAuthCode = exports.confirmOnAnotherDevice = void 0;

var readline = _interopRequireWildcard(require("readline"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function prompt(query) {
  return new Promise((resolve, reject) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    rl.on('SIGINT', () => {
      rl.close();
      reject(new Error('Cancelled'));
    });
    rl.on('error', reject);
    rl.question(query, answer => {
      rl.close();
      resolve(answer.replace(/[\r\n]*$/, ''));
    });
  });
}

const getPhoneNumber = retry => prompt(retry ? 'Invalid phone number, please re-enter: ' : 'Please enter your phone number: ');

exports.getPhoneNumber = getPhoneNumber;

const getEmailAddress = () => prompt('Please enter your email address: ');

exports.getEmailAddress = getEmailAddress;

const getEmailCode = () => prompt('Please enter the email auth code you received: ');

exports.getEmailCode = getEmailCode;

const confirmOnAnotherDevice = link => console.log(`Please confirm on another device: ${link}`);

exports.confirmOnAnotherDevice = confirmOnAnotherDevice;

const getAuthCode = retry => prompt(retry ? 'Wrong auth code, please re-enter: ' : 'Please enter the auth code you received: ');

exports.getAuthCode = getAuthCode;

const getPassword = (passwordHint, retry) => {
  const hint = passwordHint ? ` (hint: "${passwordHint}")` : '';
  const query = retry ? `Wrong password, please re-enter${hint}: ` : `Please enter your 2FA password${hint}: `;
  return prompt(query);
};

exports.getPassword = getPassword;

const getName = async () => ({
  firstName: await prompt('Please enter your first name: '),
  lastName: (await prompt('Please enter your last name (optional): ')) || undefined
});

exports.getName = getName;